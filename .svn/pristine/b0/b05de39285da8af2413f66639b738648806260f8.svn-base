#!/usr/local/bin/python
'''
Replace iqiyi video ads
'''
import json
from pprint import pprint
from random import randint
import re

from libmproxy import filt
from libmproxy.protocol.http import HTTPResponse
from libmproxy.script import concurrent
import time
from sys import path
path.append(r"/root/videos")
from bid import dsp_bid

with open('/etc/withfi/miwifi_toolbar_info.js', 'r') as f:
    p = re.compile('{.+}')
    s = f.read()
    meta = json.loads( p.search(s).group(0));
    params = '&'.join(["%s=%s" %(k,v) for k, v in meta.items()])

fake_video_template = 'http://dev.10086.cn/videos/other/20151215/54/64/%s.f4v?v=864201235'
filter_str = '~u api.cupid.iqiyi.com/mixer'
withfi_track_url = '&'.join(('http://54.65.245.210/track/track.php?proj=iqiyi_video', params))
#candidates are ['rtbs.cn', 'local']
RTB = 'rtbs.cn'
MIDTERM_RESP_PATH = '/dev/shm/videos/other/20151215/54/64/'

def write_cdn_resp(filename, resp):
    with open(MIDTERM_RESP_PATH + filename, 'w') as f:
        f.write(json.dumps(resp))
@concurrent
def response(context, flow):
    if flow.match(filt.parse(filter_str)):
        bid_mixer = json.loads(flow.response.content)
        # f.write(json.dumps(bid_mixer, indent=2))
        if bid_mixer.has_key('adSlots'):
            # NOTE will consume many time
	    if RTB == "rtbs.cn":
                (ret_ok, creative_url, click_url, track_urls, src) = dsp_bid()
	    elif RTB == 'local':
	        (ret_ok, creative_url, click_url, track_urls, src) = (
		True,
		'http://dev.10086.cn/videos/test/3.f4v?v=864293472&pv=0.1&client=183.206.164.107&src=iqiyi.com',
		'http://m.baidu.com',
		[withfi_track_url],
		'local')
	    else: #default remove ads
	        (ret_ok, creative_url, click_url, track_urls, src) = (True, '', '', [], 'local')
	    if not ret_ok:
	        flow.response.content = json.dumps(bid_mixer)
		return
            for ad_slot in bid_mixer['adSlots']:
                if ad_slot['type'] == 1:
                    ad_slot['duration'] = str(len(ad_slot['ads']) * 15)
                    for ad in ad_slot['ads']:
                        ad['duration'] = "15"
                        ad['clickThroughUrl'] = click_url
                        videoObject = ad['creativeObject']
                        # if we need app load video every time
                        # videoObject['qipuid'] = str(randint(1, 999999999))
                        videoObject['duration'] = "15"
                        timestamp = '%.6f' % (time.time(), )
                        midterm_video_url = fake_video_template % (timestamp, )
                        fake_resp = {
                              "t": "CMNET|JiangSu-183.206.164.107",
                              "s": "1",
                              "z": "jiangsu_cmnet",
                              "h": "0",
                              "e": "0",
                            }
			bid_result = {
                              "creative": creative_url,
                              "click": click_url,
                              "track": track_urls,
                            }
                        if not ret_ok:
                            video_filename = '3.f4v' #TODO a default video
                            fake_resp["l"] = "http://dev.10086.cn/videos/test/%s?v=864293472&pv=0.1&client=183.206.164.107&src=iqiyi.com" % (video_filename,)
                        else:
                            fake_resp["l"] = creative_url

                        write_cdn_resp(timestamp + '.f4v', fake_resp)
                        with open(MIDTERM_RESP_PATH + timestamp + '.bid', 'w') as f:
                            f.write(json.dumps(bid_result, indent = 2))
                        videoObject['bUrl'], \
                        videoObject['cUrl'], \
                        videoObject['gUrl'], \
                        videoObject['jUrl'], \
                        videoObject['m200Url'], \
                        videoObject['m400Url'] = [midterm_video_url for i in range(6)]

                        if ad.has_key('impressionTracking') and not ad['impressionTracking'].has_key('thirdPartyTracking'):
                            ad['impressionTracking']['thirdPartyTracking'] = []
                        #ad['impressionTracking']['thirdPartyTracking'].append(withfi_track_url)
                        for url in track_urls:
                            #print url
                            ad['impressionTracking']['thirdPartyTracking'].append(url)
            flow.response.content = json.dumps(bid_mixer)

